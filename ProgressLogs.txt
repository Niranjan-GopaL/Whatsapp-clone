
                        REMEMBER    !!!!


HOW TO CREATE A REACT-NATIVE APP in my setup --------------------FINALLY !!!--------

- npx create-expo-app ./
- yarn
- yarn add expo

- npx expo start --tunnel
------------------------------------------------------------ THAT'S IT --------------

Expo build trouble

Solution 1:

   -  Make sure both in same wifi. 
   -  npx expo start (it'll complain) 
   -  nest
                     ( Kinda like refresh )

Solution 2:

   - yarn add expo (reinstalling dependencies idk y)
   - nest
            

Look at styling in ChatListItem =====> NO UNITS DAMNNNN












------------------------ PROGRESS LOGS ----------------------------------------------

1) Initialised project

2) Working on ChatListItem in src/components/ChatListItem
   that's where I stopped 

I HAVE A PICTURE OF CAT AS PFP WITH LOTS OF TEXT elems

   poosible problem ahead 

3) Whatsapp Asset folder is THERE IN THE APP DEV dir

4) ChatListItem UI done

5) Working on sending Props part. Making rendering DYNAMIC

basic structure of a chat

const chat = {
  id: "1",
  user: {
    image:
      "https://notjustdev-dummy.s3.us-east-2.amazonaws.com/avatars/lukas.jpeg",
    name: "Lukas",
  },
  lastMessage: {
    text: "Oke",
    createdAt: "07:30",
  },
};



NOW YOU HAVE THE ABILITY TO PASS IN PROPS TO A COMPONENT SO THAT IT RENDERS DYNAMIC DATA


6) Working on ChatsScreen UI - 4

    Now just have a static data from Assets
    Later we'll get all that from backend

7) ChatScreen UI - 5 (ITS SINGULAR! lol)

<ImageBackground> is amazing.

8) Message component is used forrendering each message


                      VERY USEFULL AND RELEVENT SKILL AND 


How to render Messges depending on condition


  const isMyMessage = message.user.id == 'u1'

    <View style={
      [
          styles.container, // whenever we want to render more than one styles we render them through lists
          {
            backgroundColor: isMyMessage ? 'green' : 'white',
            alignSelf: isMyMessage ? 'flex-end' : 'flex-start'
          }
      ]
    }>


9) Expo Vector Icons is where you want to go for all icon stuff 

10)IOS EXCLUSIVE ==>

                  // src/screens/ChatScreen.js

                  return (
                    <KeyboardAvoidingView
                      behavior={Platform.OS === "ios" ? "padding" : "height"}
                      style={styles.bg}
                    >
                      <ImageBackground source={bg} style={styles.bg}>
                      ...
                      </ImageBackground>
                    </KeyboardAvoidingView>
                  )


11)  Binding the even of "onPress" to the function onSend :=
     Hooks associated 


const InputBox = () => {

    
 ---->>   const [newMessage, setNewMessage] = useState('');



---->>    const onSend = () => {

          // IT'S CONSOLE.WARN (you'll see it in screen, kinda like alert() )
          console.warn('Sending a new message: ', newMessage);

          setNewMessage('');
        };

    return (
    ...

---->>    <MaterialIcons onPress={onSend} style={styles.send} name="send" size={16} color="white" />
      
    ... 
    )

}


12) For navigation we use react navigation. Expo is working on their new navigation library 


because react native is very modularised we'll need to install the stuff that we want only:-




npx expo install @react-navigation/native @react-navigation/native-stack @react-navigation/bottom-tabs react-native-screens react-native-safe-area-context
                                                   |
                                                   |
                                                   |
                                                   |
                                                  \ /
                                                   |
yarn add @react-navigation/native @react-navigation/native-stack @react-navigation/bottom-tabs react-native-screens@~3.20.0 react-native-safe-area-context@4.5.0


(cuz this is how you install using yarn)


dependencies :-
        @react-navigation/native
        @react-navigation/native-stack
        @react-navigation/bottom-tabs
        react-native-screens@~3.20.0
        react-native-safe-area-context@4.5.0



13) I found this very useful
    find . -name "*Zone.Identifier" -type f -delete



---------------::   STACK NAVIGATOR  ::------------------------------

                we use Stack navigator :-

            - each screen is added to a stack when user triggers it
            - and when the user goes back that screen is popped off
            - there are some transitioning animation
            - behind the scenes the actual Stack Data structure stores a 
              lot of stuff including the path, and other metadata




ChatListItem/index.js

     Pressable is just "View that has onPress prop" , view does not have onPress, cuz its only a "View" 
     We need to send some data to the Chat Screen based on which Chat the user clicked
     In this component, at least for now we are querying and getting all the data (about each of the users,etc )
     we could send this data to the Chat screen but :-
                    WE DO NOT SEND SUCH LARGE AMOUNTS OF DATA THROUGH NAVIGATORS

                             ||.........................................||
    <Pressable onPress={() => navigation.navigate("Chat", {id:chat.id}) } style={styles.container}>


Navigation/Navigator.js

  // everytime user presses on ChatListItem, we were sending some information to the ChatScreen component.
  // THIS IS HOW WE ACCESS THEM
  const route = useRoute();
  console.log(route)


14) MainTabNavigator is the bottomTabNavigator. Finished Implementing



ctrl + shift + f ,  ctrl + shift + f  ==> Find in Files
ctrl + alt + b ==> Toggle secondary sidebar 


18) Amplify is just like Firebase. It gives tonnes of stuff to work with.

- Authentication
- Data Storage
- APIs



AWS AMPLIFY SECRET ACCESS KEY of uer Niranjan-GopaL :== Je5XHiRFBzVea8yqovlCAVm1lYI+HG/aePY8NIpy
AWS AMPLIFY ACCESS KEY :==  AKIAULA4FGM6OJAD32Q7


amplify pull --appId drj9nc3663cn9 --envName staging  (Pulling stuff from AWS AMplufy auth)


npm install aws-amplify aws-amplify-react-native amazon-cognito-identity-js @react-native-community/netinfo @react-native-async-storage/async-storage